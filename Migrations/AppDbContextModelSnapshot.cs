// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using juridical_api.Db;

#nullable disable

namespace juridical_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("juridical_api.Models.Entities.CasesEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CaseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("LawyerId")
                        .IsUnique();

                    b.ToTable("Cases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e5"),
                            CaseName = "Case name 1",
                            ClientId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e1"),
                            Description = "Some description",
                            LawyerId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e2"),
                            OpeningDate = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ClientsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e1"),
                            Address = "Nemecia, Frankich 22 / 1",
                            Email = "Dadaya@gmail.com",
                            FirstName = "Slava",
                            LastName = "Spanish",
                            Phone = "+3226232109"
                        },
                        new
                        {
                            Id = new Guid("8b9238b8-49c1-423a-a807-71d170671123"),
                            Address = "Nemecia, Frankich 22 / 1",
                            Email = "Dadaya@gmail.com",
                            FirstName = "Slava",
                            LastName = "Spanish",
                            Phone = "+3226232109"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ContractsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("LawyerId")
                        .IsUnique();

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e3"),
                            ClientId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e1"),
                            ExpirationDate = new DateTime(2001, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LawyerId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e2"),
                            SigningDate = new DateTime(2001, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.CourtHearingsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("HearingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("CourtHearings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e4"),
                            CaseId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e5"),
                            HearingDate = new DateTime(2001, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "Belovejskay pyshcha"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.DocumentsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e6"),
                            CaseId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e5"),
                            CreationDate = new DateTime(2005, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentName = "Super Document",
                            DocumentText = "",
                            DocumentType = "Dicloration"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.LawyersEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Lawyers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e2"),
                            Email = "AnnaKanitta@gmail.com",
                            FirstName = "Anna",
                            LastName = "Kanitta",
                            Phone = "+321333942073",
                            Specialization = "Criminal"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.PaymentsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e7"),
                            Amount = 6000.32m,
                            CaseId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e5"),
                            ClientId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e1"),
                            PaymentDate = new DateTime(2013, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Card"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ReviewsEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("LawyerId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e8"),
                            ClientId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e1"),
                            Comment = "Normale",
                            Date = new DateTime(2004, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LawyerId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e2"),
                            Rating = 4
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.TasksEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.HasIndex("LawyerId")
                        .IsUnique();

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b9658b8-49c1-423a-a807-71d1706710e9"),
                            CaseId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e5"),
                            DateOfCompletion = new DateTime(2004, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LawyerId = new Guid("8b9658b8-49c1-423a-a807-71d1706710e2"),
                            Status = "In progress",
                            TaskDescription = "Need more money"
                        });
                });

            modelBuilder.Entity("juridical_api.Models.Entities.CasesEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.ClientsEntities", "Client")
                        .WithOne("Case")
                        .HasForeignKey("juridical_api.Models.Entities.CasesEntities", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("juridical_api.Models.Entities.LawyersEntities", "Lawyer")
                        .WithOne("Case")
                        .HasForeignKey("juridical_api.Models.Entities.CasesEntities", "LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ContractsEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.ClientsEntities", "Client")
                        .WithOne("Contract")
                        .HasForeignKey("juridical_api.Models.Entities.ContractsEntities", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("juridical_api.Models.Entities.LawyersEntities", "Lawyer")
                        .WithOne("Contract")
                        .HasForeignKey("juridical_api.Models.Entities.ContractsEntities", "LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.CourtHearingsEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.CasesEntities", "Case")
                        .WithOne("CourtHearing")
                        .HasForeignKey("juridical_api.Models.Entities.CourtHearingsEntities", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.DocumentsEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.CasesEntities", "Case")
                        .WithOne("Document")
                        .HasForeignKey("juridical_api.Models.Entities.DocumentsEntities", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.PaymentsEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.CasesEntities", "Case")
                        .WithOne("Payment")
                        .HasForeignKey("juridical_api.Models.Entities.PaymentsEntities", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("juridical_api.Models.Entities.ClientsEntities", "Client")
                        .WithOne("Payment")
                        .HasForeignKey("juridical_api.Models.Entities.PaymentsEntities", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ReviewsEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.ClientsEntities", "Client")
                        .WithOne("Review")
                        .HasForeignKey("juridical_api.Models.Entities.ReviewsEntities", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("juridical_api.Models.Entities.LawyersEntities", "Lawyer")
                        .WithOne("Review")
                        .HasForeignKey("juridical_api.Models.Entities.ReviewsEntities", "LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.TasksEntities", b =>
                {
                    b.HasOne("juridical_api.Models.Entities.CasesEntities", "Case")
                        .WithOne("Task")
                        .HasForeignKey("juridical_api.Models.Entities.TasksEntities", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("juridical_api.Models.Entities.LawyersEntities", "Lawyer")
                        .WithOne("Task")
                        .HasForeignKey("juridical_api.Models.Entities.TasksEntities", "LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.CasesEntities", b =>
                {
                    b.Navigation("CourtHearing");

                    b.Navigation("Document");

                    b.Navigation("Payment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.ClientsEntities", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("Contract");

                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("juridical_api.Models.Entities.LawyersEntities", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("Contract");

                    b.Navigation("Review");

                    b.Navigation("Task");
                });
#pragma warning restore 612, 618
        }
    }
}
